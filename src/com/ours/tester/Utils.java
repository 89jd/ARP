package com.ours.tester;

/**
 * The util methods
 * @author Mohammed Rilwan April 2016.
 * 
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Utils {

	public static final float DELAY_LIMIT_TOBE_COUNTED = 0.1f;
	public static final List<String> nameList = Arrays.asList("sec_touchkey",
			"sec_touchscreen", "gpio", "qpnp_pon", "touch");

	public static void FileWrite(String file_location, String data,
			boolean appendable) {

		try {
			FileWriter fw = new FileWriter(file_location, appendable);
			fw.write(data);
			fw.close();
		} catch (IOException e) {
			System.out.println("exception happened - here's what I know: ");
			e.printStackTrace();

		}
	}

	public String getUnixKernelTimeStamp(String kernel_log,
			String pattern_tofind_in_log) {

		Pattern pTime = Pattern.compile("\\[\\s*(\\d*.\\d\\d\\d\\d\\d\\d)\\].*"
				+ pattern_tofind_in_log);
		Matcher mTime = pTime.matcher(kernel_log);

		String time = null;
		if (mTime.find()) {
			// System.out.println("Time " + mTime.group(1));
			time = mTime.group(1);
		}
		return time;
	}

	public String convertgetEventToSendEvent(String getevent_file_location)
			throws IOException {

		BufferedReader br = new BufferedReader(new FileReader(
				getevent_file_location));
		StringBuilder sb = new StringBuilder("#!/bin/sh\n");
		sb.append("#This is generated by myTester adb event injection util");
		sb.append(System.lineSeparator());
		String t = "0.0";
		String tNext = "0.0";
		Float delay = null;
		try {
			String line = br.readLine();
			int l = 1;
			String eventCmd = "";
			String eventCmdNext = "";
			String adb_cmd;
			String device = null;
			String deviceNext = null;
			String events;
			String evt = "";
			String devName = null;
			String devFile = null;
			boolean searchForName = false;
			Pattern p;
			ArrayList<String> deviceList = new ArrayList<String>();
			while (line != null) {

				if (line.contains("add device")) {
					devFile = line.split(":")[1].trim();
					searchForName = true;
				}
				if (searchForName) {
					if (line.startsWith("name:")) {
						devName = line.split(":")[1].split("\"")[1].trim();
						searchForName = false;
						for (String deviceName : nameList) {
							p = Pattern.compile(deviceName + ".*");
							if (p.matcher(devName).matches()) {
								deviceList.add(devFile);
								System.out.println("Matching device-"
										+ deviceName);
							}
						}
					}
				}
				if (line.startsWith("[")) {

					deviceNext = line.split(":")[0].split("]")[1].trim();

					if (!deviceList.contains(deviceNext)) {
						System.out.println("Non matching device,Skip-"
								+ deviceNext);
						line = br.readLine();
						continue;
					}

					events = line.split(":")[1];
					// System.out.println(line);
					tNext = getUnixKernelTimeStamp(line, "/dev/input/");
					// System.out.println(tNext);

					for (int i = 1; i < 4; i++) {
						String hexNum = events.split(" ")[i].trim();

						try {
							int n = Integer.parseInt(hexNum, 16);
							evt = String.valueOf(n);
						} catch (NumberFormatException e) {
							long n1 = Long.valueOf(hexNum, 16).longValue();
							evt = String.valueOf(n1);
						}
						eventCmdNext = eventCmdNext + " " + evt;
					}

					if (l != 1) {
						delay = Float.parseFloat(tNext) - Float.parseFloat(t);
						// System.out.println("delay " + delay);

						if ((delay > DELAY_LIMIT_TOBE_COUNTED)
								|| !deviceNext.contentEquals(device)) {
							adb_cmd = "/data/local/tmp/mysendevent "
									+ device.trim() + " " + eventCmd;
							eventCmd = "";
							eventCmdNext = eventCmdNext
									.replaceAll(
											"^.*?\\w+(\\W+\\d*\\W+\\d*\\W+\\d*)$",
											"$1");
							// System.out.println(eventCmdNext);
							// System.out.println(adb_cmd);
							sb.append(adb_cmd);
							sb.append(System.lineSeparator());
							if (delay > DELAY_LIMIT_TOBE_COUNTED) {
								System.out.println("delay between " + t + "---"
										+ tNext + "-->" + delay);
								sb.append("sleep " + delay + ";");
								sb.append(System.lineSeparator());
							}
						}
					}
					t = tNext;
					device = deviceNext;
					eventCmd = eventCmdNext;
					l++;
				}
				line = br.readLine();
			}
			sb.append("/data/local/tmp/mysendevent " + deviceNext.trim() + " "
					+ eventCmdNext);
		} catch (IOException e) {
			System.out.println("exception happened - here's what I know: ");
			e.printStackTrace();
		} finally {
			br.close();
		}
		String mes_script_file = getevent_file_location.replace("mel", "mes");
		FileWrite(mes_script_file, sb.toString(), false);
		return mes_script_file;
	}
}
